// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}
 
model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String?
  emailVerified    DateTime?
  image           String?
  role            UserRole @default(USER)
  accounts        Account[]
  projects        Project[]
 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
 
model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id       String @id @default(cuid())
  email    String
  token    String @unique
  expires  DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id       String @id @default(cuid())
  email    String
  token    String @unique
  expires  DateTime

  @@unique([email, token])
}

model Project {
  id          String @id @default(cuid())
  name        String
  userId      String
  user        User @relation(fields: [userId], references: [id])
  secrets     Secret[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Secret {
  id         String @id @default(cuid())
  label      String
  value      String

  projectId  String
  project    Project @relation(fields: [projectId], references: [id])
}